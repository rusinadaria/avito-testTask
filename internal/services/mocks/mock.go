// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_services is a generated GoMock package.
package mock_services

import (
	models "avito-testTask/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockPVZ is a mock of PVZ interface.
type MockPVZ struct {
	ctrl     *gomock.Controller
	recorder *MockPVZMockRecorder
}

// MockPVZMockRecorder is the mock recorder for MockPVZ.
type MockPVZMockRecorder struct {
	mock *MockPVZ
}

// NewMockPVZ creates a new mock instance.
func NewMockPVZ(ctrl *gomock.Controller) *MockPVZ {
	mock := &MockPVZ{ctrl: ctrl}
	mock.recorder = &MockPVZMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPVZ) EXPECT() *MockPVZMockRecorder {
	return m.recorder
}

// CreatePVZ mocks base method.
func (m *MockPVZ) CreatePVZ(arg0 models.PVZ) (models.PVZ, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePVZ", arg0)
	ret0, _ := ret[0].(models.PVZ)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePVZ indicates an expected call of CreatePVZ.
func (mr *MockPVZMockRecorder) CreatePVZ(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePVZ", reflect.TypeOf((*MockPVZ)(nil).CreatePVZ), arg0)
}

// GetPvzList mocks base method.
func (m *MockPVZ) GetPvzList(startDate, endDate *time.Time, page, limit int) ([]models.PVZWithReceptions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPvzList", startDate, endDate, page, limit)
	ret0, _ := ret[0].([]models.PVZWithReceptions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPvzList indicates an expected call of GetPvzList.
func (mr *MockPVZMockRecorder) GetPvzList(startDate, endDate, page, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPvzList", reflect.TypeOf((*MockPVZ)(nil).GetPvzList), startDate, endDate, page, limit)
}

// MockReception is a mock of Reception interface.
type MockReception struct {
	ctrl     *gomock.Controller
	recorder *MockReceptionMockRecorder
}

// MockReceptionMockRecorder is the mock recorder for MockReception.
type MockReceptionMockRecorder struct {
	mock *MockReception
}

// NewMockReception creates a new mock instance.
func NewMockReception(ctrl *gomock.Controller) *MockReception {
	mock := &MockReception{ctrl: ctrl}
	mock.recorder = &MockReceptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReception) EXPECT() *MockReceptionMockRecorder {
	return m.recorder
}

// CheckReception mocks base method.
func (m *MockReception) CheckReception(pvzId uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckReception", pvzId)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckReception indicates an expected call of CheckReception.
func (mr *MockReceptionMockRecorder) CheckReception(pvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckReception", reflect.TypeOf((*MockReception)(nil).CheckReception), pvzId)
}

// CreateReception mocks base method.
func (m *MockReception) CreateReception(arg0 uuid.UUID) (models.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", arg0)
	ret0, _ := ret[0].(models.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockReceptionMockRecorder) CreateReception(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockReception)(nil).CreateReception), arg0)
}

// MockProduct is a mock of Product interface.
type MockProduct struct {
	ctrl     *gomock.Controller
	recorder *MockProductMockRecorder
}

// MockProductMockRecorder is the mock recorder for MockProduct.
type MockProductMockRecorder struct {
	mock *MockProduct
}

// NewMockProduct creates a new mock instance.
func NewMockProduct(ctrl *gomock.Controller) *MockProduct {
	mock := &MockProduct{ctrl: ctrl}
	mock.recorder = &MockProductMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProduct) EXPECT() *MockProductMockRecorder {
	return m.recorder
}

// AddProduct mocks base method.
func (m *MockProduct) AddProduct(Type models.Type, PvzId uuid.UUID) (models.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProduct", Type, PvzId)
	ret0, _ := ret[0].(models.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddProduct indicates an expected call of AddProduct.
func (mr *MockProductMockRecorder) AddProduct(Type, PvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProduct", reflect.TypeOf((*MockProduct)(nil).AddProduct), Type, PvzId)
}

// DeleteProduct mocks base method.
func (m *MockProduct) DeleteProduct(PvzId uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", PvzId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockProductMockRecorder) DeleteProduct(PvzId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockProduct)(nil).DeleteProduct), PvzId)
}
